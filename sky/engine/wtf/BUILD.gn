# Copyright 2014 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

config("clang_warnings") {
  if (is_clang) {
    cflags = [
      "-Wno-for-loop-analysis",
      "-Wno-shift-negative-value",
    ]
  }
}

source_set("wtf") {
  sources = [
    "ASCIICType.h",
    "AddressSpaceRandomization.cpp",
    "AddressSpaceRandomization.h",
    "Alignment.h",
    "Assertions.cpp",
    "Assertions.h",
    "Atomics.h",
    "BitwiseOperations.h",
    "ByteOrder.h",
    "ByteSwap.h",
    "CPU.h",
    "CheckedArithmetic.h",
    "Compiler.h",
    "DataLog.cpp",
    "DataLog.h",
    "DefaultAllocator.cpp",
    "DefaultAllocator.h",
    "Deque.h",
    "DoubleBufferedDeque.h",
    "DoublyLinkedList.h",
    "DynamicAnnotations.cpp",
    "DynamicAnnotations.h",
    "EnumClass.h",
    "FastAllocBase.h",
    "FastMalloc.cpp",
    "FastMalloc.h",
    "FilePrintStream.cpp",
    "FilePrintStream.h",
    "Forward.h",
    "GetPtr.h",
    "HashCountedSet.h",
    "HashFunctions.h",
    "HashIterators.h",
    "HashMap.h",
    "HashSet.h",
    "HashTable.cpp",
    "HashTable.h",
    "HashTableDeletedValueType.h",
    "HashTraits.h",
    "HexNumber.h",
    "InstanceCounter.cpp",
    "InstanceCounter.h",
    "LeakAnnotations.h",
    "LinkedHashSet.h",
    "LinkedStack.h",
    "ListHashSet.h",
    "Locker.h",
    "MainThread.cpp",
    "MainThread.h",
    "MakeUnique.h",
    "MallocZoneSupport.h",
    "MathExtras.h",
    "NonCopyingSort.h",
    "Noncopyable.h",
    "NotFound.h",
    "NullPtr.h",
    "OperatingSystem.h",
    "OwnPtr.h",
    "OwnPtrCommon.h",
    "PageAllocator.cpp",
    "PageAllocator.h",
    "PartitionAlloc.cpp",
    "PartitionAlloc.h",
    "PassOwnPtr.h",
    "PassRefPtr.h",
    "PassTraits.h",
    "PrintStream.cpp",
    "PrintStream.h",
    "RawPtr.h",
    "RefCounted.h",
    "RefCountedLeakCounter.cpp",
    "RefCountedLeakCounter.h",
    "RefPtr.h",
    "RefVector.h",
    "SaturatedArithmetic.h",
    "SizeLimits.cpp",
    "SpinLock.h",
    "StaticConstructors.h",
    "StdLibExtras.h",
    "StreamBuffer.h",
    "StringExtras.h",
    "StringHasher.h",
    "TemporaryChange.h",
    "ThreadIdentifierDataPthreads.cpp",
    "ThreadIdentifierDataPthreads.h",
    "ThreadRestrictionVerifier.h",
    "ThreadSafeRefCounted.h",
    "ThreadSpecific.h",
    "Threading.h",
    "ThreadingPrimitives.h",
    "ThreadingPthreads.cpp",
    "TypeTraits.cpp",
    "TypeTraits.h",
    "Vector.h",
    "VectorTraits.h",
    "WTF.cpp",
    "WTF.h",
    "WTFExport.h",
    "WTFThreadData.cpp",
    "WTFThreadData.h",
    "asm/SaturatedArithmeticARM.h",
    "dtoa.cpp",
    "dtoa.h",
    "dtoa/bignum-dtoa.cc",
    "dtoa/bignum-dtoa.h",
    "dtoa/bignum.cc",
    "dtoa/bignum.h",
    "dtoa/cached-powers.cc",
    "dtoa/cached-powers.h",
    "dtoa/diy-fp.cc",
    "dtoa/diy-fp.h",
    "dtoa/double-conversion.cc",
    "dtoa/double-conversion.h",
    "dtoa/double.h",
    "dtoa/fast-dtoa.cc",
    "dtoa/fast-dtoa.h",
    "dtoa/fixed-dtoa.cc",
    "dtoa/fixed-dtoa.h",
    "dtoa/strtod.cc",
    "dtoa/strtod.h",
    "dtoa/utils.h",
    "text/ASCIIFastPath.h",
    "text/AtomicString.cpp",
    "text/AtomicString.h",
    "text/AtomicStringHash.h",
    "text/CString.cpp",
    "text/CString.h",
    "text/IntegerToStringConversion.h",
    "text/StringBuffer.h",
    "text/StringBuilder.cpp",
    "text/StringBuilder.h",
    "text/StringConcatenate.h",
    "text/StringHash.h",
    "text/StringImpl.cpp",
    "text/StringImpl.h",
    "text/StringOperators.h",
    "text/StringStatics.cpp",
    "text/StringStatics.h",
    "text/StringUTF8Adaptor.h",
    "text/StringView.h",
    "text/TextCodec.cpp",
    "text/TextCodec.h",
    "text/TextCodecASCIIFastPath.h",
    "text/TextCodecICU.cpp",
    "text/TextCodecICU.h",
    "text/TextCodecLatin1.cpp",
    "text/TextCodecLatin1.h",
    "text/TextCodecReplacement.cpp",
    "text/TextCodecReplacement.h",
    "text/TextCodecUTF16.cpp",
    "text/TextCodecUTF16.h",
    "text/TextCodecUTF8.cpp",
    "text/TextCodecUTF8.h",
    "text/TextCodecUserDefined.cpp",
    "text/TextCodecUserDefined.h",
    "text/TextEncoding.cpp",
    "text/TextEncoding.h",
    "text/TextEncodingRegistry.cpp",
    "text/TextEncodingRegistry.h",
    "text/TextPosition.cpp",
    "text/TextPosition.h",
    "text/WTFString.cpp",
    "text/WTFString.h",
    "unicode/CharacterNames.h",
    "unicode/Collator.h",
    "unicode/UTF8.cpp",
    "unicode/UTF8.h",
    "unicode/Unicode.h",
    "unicode/icu/CollatorICU.cpp",
    "unicode/icu/UnicodeIcu.h",
  ]

  configs += [
    ":clang_warnings",
    "$flutter_root/sky/engine:config",
    "$flutter_root/sky/engine:non_test_config",
  ]

  public_configs = [
    "$flutter_root/common:flutter_config",
    "$flutter_root:config",
    "//third_party/icu:icu_config",
  ]

  public_deps = [
    "//garnet/public/lib/fxl",
    "//third_party/icu",
  ]

  deps = [
    "$flutter_root/glue",
  ]

  if (is_android) {
    libs = [ "log" ]
  }
}

executable("wtf_unittests") {
  testonly = true

  sources = [
    "CheckedArithmeticTest.cpp",
    "DequeTest.cpp",
    "DoubleBufferedDequeTest.cpp",
    "HashMapTest.cpp",
    "HashSetTest.cpp",
    "ListHashSetTest.cpp",
    "MathExtrasTest.cpp",
    "PartitionAllocTest.cpp",
    "RefPtrTest.cpp",
    "SaturatedArithmeticTest.cpp",
    "StringExtrasTest.cpp",
    "StringHasherTest.cpp",
    "TemporaryChangeTest.cpp",
    "VectorTest.cpp",
    "testing/RunAllTests.cpp",
    "testing/WTFTestHelpers.cpp",
    "testing/WTFTestHelpers.h",
    "testing/WTFTestHelpersTest.cpp",
    "text/AtomicStringTest.cpp",
    "text/CStringTest.cpp",
    "text/StringBufferTest.cpp",
    "text/StringBuilderTest.cpp",
    "text/StringImplTest.cpp",
    "text/StringOperatorsTest.cpp",
    "text/TextCodecUTF8Test.cpp",

    # The following tests depend on either ICU or the locale. Disable them for
    # now.
    # "text/TextCodecReplacementTest.cpp",
    # "text/WTFStringTest.cpp",
  ]

  configs += [
    ":clang_warnings",
    "$flutter_root/sky/engine:config",
  ]

  deps = [
    ":wtf",
    "//third_party/dart/runtime:libdart_jit",

    # Does not use $flutter_root/testing because it needs and provides its own main
    # function in RunAllTests.cpp.
    "//third_party/gtest",
  ]
}
